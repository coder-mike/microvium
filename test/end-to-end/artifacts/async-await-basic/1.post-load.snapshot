export 0 = &function run;

slot ['global:assert'] = host function 2;
slot ['global:assertEqual'] = host function 3;
slot ['global:asyncTestComplete'] = host function 6;
slot ['global:print'] = host function 1;
slot runAsync = &function runAsync;
slot test_asyncArrowFunctions = &function test_asyncArrowFunctions;
slot test_asyncClosure = &function test_asyncClosure;
slot test_asyncFunctionArguments = &function test_asyncFunctionArguments;
slot test_asyncInExpression = &function test_asyncInExpression;
slot test_asyncThisArgument = &function test_asyncThisArgument;
slot test_asyncVariablesFromNested = &function test_asyncVariablesFromNested;
slot test_awaitInsideCatch = &function test_awaitInsideCatch;
slot test_awaitReturnValue = &function test_awaitReturnValue;
slot test_exceptionsBasic = &function test_exceptionsBasic;
slot test_exceptionsNested = &function test_exceptionsNested;
slot test_implicitReturn = &function test_implicitReturn;
slot test_minimal = &function test_minimal;
slot test_multipleJobs = &function test_multipleJobs;
slot test_nestedClosure = &function test_nestedClosure;
slot test_syncClosureInAsync = &function test_syncClosureInAsync;

function Array_push() {
  entry:
    LoadArg(index 1);
    LoadArg(index 0);
    LoadArg(index 0);
    Literal(lit 'length');
    ObjectGet();
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function anonymous() {
  entry:
    AsyncStart(count 5, flag true);
    LoadArg(index 1);
    StoreScoped(index 2);
    LoadArg(index 2);
    StoreScoped(index 3);
    LoadScoped(index 11);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 0, count 2);
    Pop(count 1);
    LoadScoped(index 2);
    LoadScoped(index 3);
    BinOp(op '+');
    LoadScoped(index 12);
    BinOp(op '+');
    AsyncReturn();
}

function anonymous1() {
  entry:
    AsyncStart(count 6, flag true);
    LoadArg(index 1);
    StoreScoped(index 3);
    LoadArg(index 2);
    StoreScoped(index 4);
    Literal(lit deleted);
    Literal(lit 6);
    StoreVar(index 3);
    LoadScoped(index 16);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 1, count 3);
    Pop(count 1);
    LoadScoped(index 3);
    LoadScoped(index 4);
    BinOp(op '+');
    LoadScoped(index 17);
    BinOp(op '+');
    LoadScoped(index 7);
    Literal(lit 'd');
    ObjectGet();
    BinOp(op '+');
    LoadVar(index 3);
    BinOp(op '+');
    AsyncReturn();
}

function anonymous2() {
  entry:
    Literal(lit deleted);
    Literal(lit 6);
    StoreVar(index 0);
    LoadArg(index 1);
    LoadArg(index 2);
    BinOp(op '+');
    LoadScoped(index 11);
    BinOp(op '+');
    LoadScoped(index 1);
    Literal(lit 'd');
    ObjectGet();
    BinOp(op '+');
    LoadVar(index 0);
    BinOp(op '+');
    Return();
}

function asyncCatchBlock() {
  entry:
    Literal(lit false);
    AsyncComplete();
}

function asyncContinue() {
  entry:
    LoadScoped(index 1);
    Literal(lit undefined);
    LoadScoped(index 2);
    LoadScoped(index 3);
    Call(count 3, flag false);
    Return();
}

function asyncFunction() {
  entry:
    AsyncStart(count 3, flag false);
    LoadArg(index 1);
    StoreScoped(index 2);
    LoadScoped(index 2);
    Literal(lit 1);
    BinOp(op '+');
    AsyncReturn();
}

function asyncHostCallback() {
  entry:
    Literal(lit undefined);
    LoadArg(index 2);
    LoadArg(index 1);
    AsyncComplete();
}

function explicitReturn1() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit 1);
    AsyncReturn();
}

function explicitReturn2() {
  entry:
    AsyncStart(count 3, flag true);
    LoadScoped(index 15);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 0, count 2);
    Pop(count 1);
    Literal(lit 2);
    AsyncReturn();
}

function func1() {
  entry:
    AsyncStart(count 4, flag true);
    Literal(lit &function func2);
    ClosureNew();
    LoadVar(index 3);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 1, count 3);
    Pop(count 1);
    LoadScoped(index 9);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 1, count 3);
    Pop(count 1);
    LoadVar(index 3);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 1, count 3);
    Pop(count 1);
    Pop(count 1);
    Literal(lit undefined);
    AsyncReturn();
}

function func2() {
  entry:
    AsyncStart(count 4, flag true);
    Literal(lit &function func3);
    ClosureNew();
    LoadVar(index 3);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 1, count 3);
    Pop(count 1);
    LoadScoped(index 15);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 1, count 3);
    Pop(count 1);
    LoadVar(index 3);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 1, count 3);
    Pop(count 1);
    Pop(count 1);
    Literal(lit undefined);
    AsyncReturn();
}

function func3() {
  entry:
    AsyncStart(count 3, flag true);
    LoadScoped(index 21);
    LoadVar(index 3);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 4);
    StoreScoped(index 21);
    Pop(count 1);
    Pop(count 1);
    LoadScoped(index 20);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 0, count 2);
    Pop(count 1);
    LoadScoped(index 21);
    LoadVar(index 3);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 4);
    StoreScoped(index 21);
    Pop(count 1);
    Pop(count 1);
    Literal(lit undefined);
    AsyncReturn();
}

function implicitReturn1() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit undefined);
    AsyncReturn();
}

function implicitReturn2() {
  entry:
    AsyncStart(count 3, flag true);
    LoadScoped(index 15);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 0, count 2);
    Pop(count 1);
    Literal(lit undefined);
    AsyncReturn();
}

function method() {
  entry:
    ScopePush(count 3);
    LoadArg(index 0);
    StoreScoped(index 1);
    // captures c and `this`.
    Literal(lit &function anonymous1);
    StoreScoped(index 0);
    LoadReg(name 'closure');
    // captures c and `this`.
    Return();
}

function method1() {
  entry:
    ScopePush(count 3);
    LoadArg(index 0);
    StoreScoped(index 1);
    // captures c and `this`.
    Literal(lit &function anonymous2);
    StoreScoped(index 0);
    LoadReg(name 'closure');
    // captures c and `this`.
    Return();
}

function myAsyncFunc() {
  entry:
    AsyncStart(count 2, flag false);
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'Inside async function');
    Call(count 2, flag true);
    Literal(lit undefined);
    AsyncReturn();
}

function nested2() {
  entry:
    AsyncStart(count 3, flag true);
    LoadScoped(index 13);
    Literal(lit 19);
    BinOp(op '*');
    LoadVar(index 3);
    StoreScoped(index 13);
    Pop(count 1);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc() {
  entry:
    AsyncStart(count 3, flag true);
    LoadScoped(index 13);
    Literal(lit 13);
    BinOp(op '*');
    LoadVar(index 3);
    StoreScoped(index 13);
    Pop(count 1);
    LoadScoped(index 14);
    Literal(lit 13);
    BinOp(op '*');
    LoadVar(index 3);
    StoreScoped(index 14);
    Pop(count 1);
    LoadScoped(index 12);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 0, count 2);
    Pop(count 1);
    LoadScoped(index 13);
    Literal(lit 17);
    BinOp(op '*');
    LoadVar(index 3);
    StoreScoped(index 13);
    Pop(count 1);
    LoadScoped(index 14);
    Literal(lit 17);
    BinOp(op '*');
    LoadVar(index 3);
    StoreScoped(index 14);
    Pop(count 1);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc1() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit 5);
    AsyncReturn();
}

function nestedFunc10() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc11() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc12() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit 5);
    Throw();
}

function nestedFunc13() {
  entry:
    AsyncStart(count 5, flag true);
    StartTry(@block7);
    LoadScoped(index 17);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    // This time trying throw after await
    Literal(lit 5);
    Throw();
  block7:
    LoadVar(index 3);
    Throw();
  block8:
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc14() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc15() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc16() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc17() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit 5);
    Throw();
}

function nestedFunc18() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit 6);
    Throw();
}

function nestedFunc19() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc2() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit 7);
    AsyncReturn();
}

function nestedFunc3() {
  entry:
    AsyncStart(count 6, flag false);
    LoadArg(index 1);
    StoreScoped(index 2);
    LoadArg(index 2);
    StoreScoped(index 3);
    LoadArg(index 3);
    StoreScoped(index 4);
    LoadArg(index 4);
    StoreScoped(index 5);
    LoadScoped(index 2);
    LoadScoped(index 3);
    BinOp(op '+');
    LoadScoped(index 4);
    BinOp(op '+');
    LoadScoped(index 5);
    BinOp(op '+');
    AsyncReturn();
}

function nestedFunc4() {
  entry:
    AsyncStart(count 6, flag true);
    LoadArg(index 1);
    StoreScoped(index 2);
    LoadArg(index 2);
    StoreScoped(index 3);
    LoadArg(index 3);
    StoreScoped(index 4);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 2);
    Literal(lit 3);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 3);
    Literal(lit 5);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 4);
    Literal(lit 7);
    Call(count 3, flag true);
    LoadScoped(index 11);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 0, count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 2);
    Literal(lit 3);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 3);
    Literal(lit 5);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 4);
    Literal(lit 7);
    Call(count 3, flag true);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc5() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc6() {
  entry:
    AsyncStart(count 5, flag true);
    LoadArg(index 0);
    StoreScoped(index 2);
    LoadArg(index 1);
    StoreScoped(index 3);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 2);
    Literal(lit 'a');
    ObjectGet();
    Literal(lit 3);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 2);
    Literal(lit 'b');
    ObjectGet();
    Literal(lit 5);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 3);
    Literal(lit 7);
    Call(count 3, flag true);
    LoadScoped(index 11);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 0, count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 2);
    Literal(lit 'a');
    ObjectGet();
    Literal(lit 3);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 2);
    Literal(lit 'b');
    ObjectGet();
    Literal(lit 5);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 3);
    Literal(lit 7);
    Call(count 3, flag true);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc7() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc8() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit undefined);
    AsyncReturn();
}

function nestedFunc9() {
  entry:
    AsyncStart(count 2, flag false);
    Literal(lit undefined);
    AsyncReturn();
}

function run() {
  entry:
    // Void-call async function
    LoadGlobal(name 'runAsync');
    Literal(lit undefined);
    Call(count 1, flag true);
    Literal(lit undefined);
    Return();
}

function runAsync() {
  entry:
    AsyncStart(count 4, flag false);
    StartTry(@block1);
    LoadGlobal(name 'test_minimal');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_awaitReturnValue');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_asyncVariablesFromNested');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_asyncInExpression');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_asyncFunctionArguments');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_asyncThisArgument');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_asyncArrowFunctions');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_implicitReturn');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_asyncClosure');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_syncClosureInAsync');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_exceptionsBasic');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_exceptionsNested');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_multipleJobs');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_nestedClosure');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'test_awaitInsideCatch');
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 2);
    Pop(count 1);
    LoadGlobal(name 'global:asyncTestComplete');
    Literal(lit undefined);
    Literal(lit true);
    Literal(lit undefined);
    Call(count 3, flag true);
    EndTry();
    Jump(@block2);
  block1:
    LoadGlobal(name 'global:asyncTestComplete');
    Literal(lit undefined);
    Literal(lit false);
    LoadVar(index 3);
    Call(count 3, flag true);
    Pop(count 1);
    Jump(@block2);
  block2:
    Literal(lit undefined);
    AsyncReturn();
}

function task1() {
  entry:
    AsyncStart(count 3, flag true);
    LoadScoped(index 9);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 0, count 2);
    Pop(count 1);
    LoadScoped(index 10);
    Literal(lit ';Job1');
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 10);
    Pop(count 1);
    Literal(lit undefined);
    AsyncReturn();
}

function task2() {
  entry:
    AsyncStart(count 3, flag true);
    LoadScoped(index 9);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 0, count 2);
    Pop(count 1);
    LoadScoped(index 10);
    Literal(lit ';Job2');
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 10);
    Pop(count 1);
    Literal(lit undefined);
    AsyncReturn();
}

function test_asyncArrowFunctions() {
  entry:
    AsyncStart(count 6, flag false);
    Literal(lit &function nestedFunc8);
    StoreScoped(index 4);
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit 4);
    StoreScoped(index 5);
    Literal(lit &function anonymous);
    ClosureNew();
    StoreVar(index 3);
    LoadVar(index 3);
    Literal(lit undefined);
    Literal(lit 1);
    Literal(lit 2);
    AwaitCall(count 3);
    Await();
    AsyncResume(count 2, count 4);
    StoreVar(index 4);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 4);
    Literal(lit 7);
    Call(count 3, flag true);
    Pop(count 2);
    Literal(lit undefined);
    AsyncReturn();
}

function test_asyncClosure() {
  entry:
    AsyncStart(count 7, flag false);
    Literal(lit &function method);
    ClosureNew();
    Literal(lit &function nestedFunc10);
    StoreScoped(index 5);
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit 4);
    StoreScoped(index 6);
    ObjectNew();
    LoadVar(index 6);
    Literal(lit 'd');
    Literal(lit 5);
    ObjectSet();
    LoadVar(index 6);
    Literal(lit 'method');
    LoadVar(index 3);
    ObjectSet();
    StoreVar(index 4);
    Literal(lit undefined);
    LoadVar(index 4);
    LoadVar(index 7);
    Literal(lit 'method');
    ObjectGet();
    StoreVar(index 6);
    Call(count 1, flag false);
    Literal(lit undefined);
    Literal(lit 1);
    Literal(lit 2);
    AwaitCall(count 3);
    Await();
    AsyncResume(count 3, count 5);
    StoreVar(index 5);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 5);
    Literal(lit 18);
    Call(count 3, flag true);
    Pop(count 3);
    Literal(lit undefined);
    AsyncReturn();
}

function test_asyncFunctionArguments() {
  entry:
    AsyncStart(count 4, flag false);
    Literal(lit &function nestedFunc4);
    ClosureNew();
    Literal(lit &function nestedFunc5);
    StoreScoped(index 3);
    // This function tests that function arguments are correctly captured by
    // async functions.
    LoadVar(index 3);
    Literal(lit undefined);
    Literal(lit 3);
    Literal(lit 5);
    Literal(lit 7);
    AwaitCall(count 4);
    Await();
    AsyncResume(count 1, count 3);
    Pop(count 1);
    Pop(count 1);
    Literal(lit undefined);
    AsyncReturn();
}

function test_asyncInExpression() {
  entry:
    AsyncStart(count 11, flag false);
    Literal(lit &function nestedFunc1);
    Literal(lit &function nestedFunc2);
    Literal(lit &function nestedFunc3);
    Literal(lit deleted);
    Literal(lit deleted);
    // Here the array literal is a temporary pushed to the stack and then each
    // element is awaited in turn. This tests that the temporary is correctly
    // restored after each await point.
    ArrayNew();
    LoadVar(index 8);
    Literal(lit 0);
    Literal(lit 3);
    ObjectSet();
    LoadVar(index 8);
    Literal(lit 1);
    LoadVar(index 3);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 8, count 10);
    ObjectSet();
    LoadVar(index 8);
    Literal(lit 2);
    LoadVar(index 4);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 8, count 10);
    ObjectSet();
    LoadVar(index 8);
    Literal(lit 3);
    Literal(lit 11);
    ObjectSet();
    StoreVar(index 6);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 6);
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 4);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 6);
    Literal(lit 0);
    ObjectGet();
    Literal(lit 3);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 6);
    Literal(lit 1);
    ObjectGet();
    Literal(lit 5);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 6);
    Literal(lit 2);
    ObjectGet();
    Literal(lit 7);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 6);
    Literal(lit 3);
    ObjectGet();
    Literal(lit 11);
    Call(count 3, flag true);
    // Similarly here the function call involves pushing the arguments to the
    // stack as temporaries, so this tests that the stack is correctly restored
    // after each await point.
    LoadVar(index 5);
    Literal(lit undefined);
    Literal(lit 3);
    LoadVar(index 3);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 8, count 10);
    LoadVar(index 4);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 9, count 11);
    Literal(lit 11);
    AwaitCall(count 5);
    Await();
    AsyncResume(count 5, count 7);
    StoreVar(index 7);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 7);
    Literal(lit 26);
    Call(count 3, flag true);
    Pop(count 5);
    Literal(lit undefined);
    AsyncReturn();
}

function test_asyncThisArgument() {
  entry:
    AsyncStart(count 5, flag false);
    Literal(lit &function nestedFunc6);
    ClosureNew();
    Literal(lit &function nestedFunc7);
    StoreScoped(index 4);
    Literal(lit deleted);
    ObjectNew();
    LoadVar(index 5);
    Literal(lit 'a');
    Literal(lit 3);
    ObjectSet();
    LoadVar(index 5);
    Literal(lit 'b');
    Literal(lit 5);
    ObjectSet();
    LoadVar(index 5);
    Literal(lit 'nestedFunc');
    LoadVar(index 3);
    ObjectSet();
    StoreVar(index 4);
    // This function tests that function arguments are correctly captured by
    // async functions.
    Literal(lit undefined);
    LoadVar(index 4);
    LoadVar(index 6);
    Literal(lit 'nestedFunc');
    ObjectGet();
    StoreVar(index 5);
    Literal(lit 7);
    AwaitCall(count 2);
    Await();
    AsyncResume(count 2, count 4);
    Pop(count 1);
    Pop(count 2);
    Literal(lit undefined);
    AsyncReturn();
}

function test_asyncVariablesFromNested() {
  entry:
    AsyncStart(count 10, flag false);
    Literal(lit &function nested2);
    ClosureNew();
    StoreScoped(index 7);
    Literal(lit deleted);
    // This function tests that variables in an async function can be accessed
    // correctly from a nested closure.
    // Variable in root
    Literal(lit 2);
    StoreScoped(index 8);
    // closure-accessed
    Literal(lit 3);
    StoreVar(index 3);
    // local-accessed
    StartTry(@block3);
    Literal(lit &function nestedFunc);
    ClosureNew();
    Literal(lit deleted);
    // Variable nested in try block.
    Literal(lit 5);
    StoreScoped(index 9);
    // closure-accessed
    Literal(lit 7);
    StoreVar(index 7);
    // local accessed
    LoadVar(index 6);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 5, count 4);
    Pop(count 1);
    LoadScoped(index 8);
    Literal(lit 11);
    BinOp(op '*');
    LoadVar(index 8);
    StoreScoped(index 8);
    Pop(count 1);
    LoadScoped(index 9);
    Literal(lit 11);
    BinOp(op '*');
    LoadVar(index 8);
    StoreScoped(index 9);
    Pop(count 1);
    LoadVar(index 3);
    Literal(lit 11);
    BinOp(op '*');
    LoadVar(index 8);
    StoreVar(index 3);
    Pop(count 1);
    LoadVar(index 7);
    Literal(lit 11);
    BinOp(op '*');
    LoadVar(index 8);
    StoreVar(index 7);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 9);
    Literal(lit 12155);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 7);
    Literal(lit 77);
    Call(count 3, flag true);
    EndTry();
    Jump(@block4);
  block3:
    Pop(count 1);
    Literal(lit 0);
    LoadVar(index 4);
    StoreScoped(index 8);
    Pop(count 1);
    Literal(lit 0);
    LoadVar(index 4);
    StoreVar(index 3);
    Pop(count 1);
    Jump(@block4);
  block4:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 8);
    Literal(lit 92378);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 3);
    Literal(lit 33);
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    AsyncReturn();
}

function test_awaitInsideCatch() {
  entry:
    AsyncStart(count 9, flag false);
    Literal(lit &function nestedFunc17);
    Literal(lit &function nestedFunc18);
    Literal(lit &function nestedFunc19);
    StartTry(@block15);
    StartTry(@block13);
    LoadVar(index 3);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 7, count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assert');
    Literal(lit undefined);
    Literal(lit false);
    Call(count 2, flag true);
    EndTry();
    Jump(@block14);
  block13:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 8);
    Literal(lit 5);
    Call(count 3, flag true);
    // Await fail
    LoadVar(index 4);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 6, count 3);
    Pop(count 1);
    Pop(count 1);
    Jump(@block14);
  block14:
    EndTry();
    Jump(@block16);
  block15:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 6);
    Literal(lit 6);
    Call(count 3, flag true);
    // Await success
    LoadVar(index 5);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 4, count 6);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 6);
    Literal(lit 6);
    Call(count 3, flag true);
    Pop(count 1);
    Jump(@block16);
  block16:
    Pop(count 3);
    Literal(lit undefined);
    AsyncReturn();
}

// Tests awaiting a JS async function which completes immediately with a return
// value. This tests basic await-call and that the return value is used
// correctly. Also the result is scheduled on the job queue.
function test_awaitReturnValue() {
  entry:
    AsyncStart(count 4, flag false);
    Literal(lit &function asyncFunction);
    Literal(lit deleted);
    LoadVar(index 3);
    Literal(lit undefined);
    Literal(lit 22);
    AwaitCall(count 2);
    Await();
    AsyncResume(count 2, count 4);
    StoreVar(index 4);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 4);
    Literal(lit 23);
    Call(count 3, flag true);
    Pop(count 2);
    Literal(lit undefined);
    AsyncReturn();
}

function test_exceptionsBasic() {
  entry:
    AsyncStart(count 5, flag false);
    Literal(lit &function nestedFunc12);
    StartTry(@block5);
    LoadVar(index 3);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 3, count 2);
    Pop(count 1);
    LoadGlobal(name 'global:assert');
    Literal(lit undefined);
    Literal(lit false);
    Call(count 2, flag true);
    EndTry();
    Jump(@block6);
  block5:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 4);
    Literal(lit 5);
    Call(count 3, flag true);
    Pop(count 1);
    Jump(@block6);
  block6:
    Pop(count 1);
    Literal(lit undefined);
    AsyncReturn();
}

function test_exceptionsNested() {
  entry:
    AsyncStart(count 11, flag false);
    Literal(lit &function nestedFunc13);
    ClosureNew();
    Literal(lit &function nestedFunc14);
    StoreScoped(index 10);
    Literal(lit deleted);
    Literal(lit 2);
    StoreVar(index 4);
    StartTry(@block11);
    Literal(lit deleted);
    Literal(lit 3);
    StoreVar(index 7);
    StartTry(@block9);
    LoadVar(index 4);
    LoadVar(index 7);
    BinOp(op '*');
    LoadVar(index 10);
    StoreVar(index 4);
    Pop(count 1);
    LoadVar(index 4);
    LoadVar(index 3);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 8, count 3);
    BinOp(op '*');
    LoadVar(index 10);
    StoreVar(index 4);
    Pop(count 1);
    EndTry();
    Jump(@block10);
  block9:
    LoadVar(index 4);
    LoadVar(index 8);
    BinOp(op '*');
    LoadVar(index 9);
    StoreVar(index 4);
    Pop(count 1);
    LoadVar(index 4);
    LoadVar(index 7);
    BinOp(op '*');
    LoadVar(index 9);
    StoreVar(index 4);
    Pop(count 1);
    // Check that y is intact on the stack between the 2 catch blocks.
    // This throw should be caught by the outer catch block if the catch stack
    // is correctly restored.
    Literal(lit 7);
    Throw();
  block10:
    EndTry();
    Jump(@block12);
  block11:
    LoadVar(index 4);
    LoadVar(index 5);
    BinOp(op '*');
    LoadVar(index 6);
    StoreVar(index 4);
    Pop(count 1);
    Pop(count 1);
    Jump(@block12);
  block12:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 4);
    Literal(lit 630);
    Call(count 3, flag true);
    Pop(count 2);
    Literal(lit undefined);
    AsyncReturn();
}

function test_implicitReturn() {
  entry:
    AsyncStart(count 11, flag false);
    Literal(lit &function implicitReturn1);
    Literal(lit &function explicitReturn1);
    Literal(lit &function implicitReturn2);
    ClosureNew();
    Literal(lit &function explicitReturn2);
    ClosureNew();
    Literal(lit &function nestedFunc9);
    StoreScoped(index 10);
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit deleted);
    LoadVar(index 3);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 8, count 10);
    StoreVar(index 7);
    LoadVar(index 4);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 8, count 10);
    StoreVar(index 8);
    LoadVar(index 5);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 8, count 10);
    StoreVar(index 9);
    LoadVar(index 6);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 8, count 10);
    StoreVar(index 10);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 7);
    Literal(lit undefined);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 8);
    Literal(lit 1);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 9);
    Literal(lit undefined);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 10);
    Literal(lit 2);
    Call(count 3, flag true);
    Pop(count 8);
    Literal(lit undefined);
    AsyncReturn();
}

// Void-calling async function with no await points or variable bindings.
function test_minimal() {
  entry:
    Literal(lit &function myAsyncFunc);
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'Before async function');
    Call(count 2, flag true);
    // Void-calling async func. It will complete synchronously and the promise
    // will be elided because it's not used.
    LoadVar(index 0);
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'After async synchronous return');
    Call(count 2, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_multipleJobs() {
  entry:
    AsyncStart(count 6, flag false);
    Literal(lit &function task1);
    ClosureNew();
    Literal(lit &function task2);
    ClosureNew();
    Literal(lit &function nestedFunc15);
    StoreScoped(index 4);
    // This function tests the engine can handle multiple jobs in the job queue
    // simultaneously.
    // nestedFunc completes immediately which should schedule the caller to
    // continue in the job queue. So `task1` will put one job in the queue, and
    // `task2` will put another. Then the parent waits for the job queue to flush
    // and checks the result.
    Literal(lit 'Start');
    StoreScoped(index 5);
    LoadVar(index 3);
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadVar(index 4);
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadScoped(index 5);
    Literal(lit ';End');
    BinOp(op '+');
    LoadVar(index 5);
    StoreScoped(index 5);
    Pop(count 1);
    LoadScoped(index 4);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 2, count 4);
    Pop(count 1);
    // Wait for job queue
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 5);
    Literal(lit 'Start;End;Job1;Job2');
    Call(count 3, flag true);
    Pop(count 2);
    Literal(lit undefined);
    AsyncReturn();
}

function test_nestedClosure() {
  entry:
    AsyncStart(count 5, flag false);
    Literal(lit &function func1);
    ClosureNew();
    Literal(lit &function nestedFunc16);
    StoreScoped(index 3);
    // This tests that the parent references in async closures are correct, and
    // the static analysis properly indexes the variables.
    Literal(lit 0);
    StoreScoped(index 4);
    LoadVar(index 3);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 1, count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 4);
    Literal(lit 8);
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    AsyncReturn();
}

function test_syncClosureInAsync() {
  entry:
    AsyncStart(count 7, flag false);
    Literal(lit &function method1);
    ClosureNew();
    Literal(lit &function nestedFunc11);
    Literal(lit deleted);
    Literal(lit deleted);
    // Among other things, this tests that the `return` statement in the closure
    // isn't picked up as an async-return, even though it's lexically inside an
    // async function.
    Literal(lit 4);
    StoreScoped(index 6);
    ObjectNew();
    LoadVar(index 7);
    Literal(lit 'd');
    Literal(lit 5);
    ObjectSet();
    LoadVar(index 7);
    Literal(lit 'method');
    LoadVar(index 3);
    ObjectSet();
    StoreVar(index 5);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit undefined);
    LoadVar(index 5);
    LoadVar(index 10);
    Literal(lit 'method');
    ObjectGet();
    StoreVar(index 9);
    Call(count 1, flag false);
    Literal(lit undefined);
    Literal(lit 1);
    Literal(lit 2);
    Call(count 3, flag false);
    Literal(lit 18);
    Call(count 3, flag true);
    Literal(lit undefined);
    LoadVar(index 5);
    LoadVar(index 8);
    Literal(lit 'method');
    ObjectGet();
    StoreVar(index 7);
    Call(count 1, flag false);
    StoreVar(index 6);
    LoadVar(index 4);
    Literal(lit undefined);
    AwaitCall(count 1);
    Await();
    AsyncResume(count 4, count 6);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit undefined);
    LoadVar(index 5);
    LoadVar(index 10);
    Literal(lit 'method');
    ObjectGet();
    StoreVar(index 9);
    Call(count 1, flag false);
    Literal(lit undefined);
    Literal(lit 1);
    Literal(lit 2);
    Call(count 3, flag false);
    Literal(lit 18);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 6);
    Literal(lit undefined);
    Literal(lit 1);
    Literal(lit 3);
    Call(count 3, flag false);
    Literal(lit 19);
    Call(count 3, flag true);
    Pop(count 4);
    Literal(lit undefined);
    AsyncReturn();
}

allocation 1 = {
};

allocation 7 = {
  push: &function Array_push,
};