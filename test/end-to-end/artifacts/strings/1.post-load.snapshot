export 0 = &function run;

slot asciiTests = &function asciiTests;
slot basicMultilingualPlaneTests = &function basicMultilingualPlaneTests;
slot fullUnicodeTests = &function fullUnicodeTests;
slot ['global:assertEqual'] = host function 3;
slot ['global:textSupport'] = false;
slot testStringPrototypeMethods = &function testStringPrototypeMethods;

function asciiTests() {
  entry:
    // ROM string
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'abc');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 3);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'abc');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 'a');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'abc');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 'c');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'abc');
    Literal(lit 3);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3, flag true);
    // RAM string (constructed)
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'a');
    Literal(lit 'bc');
    BinOp(op '+');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 3);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'a');
    Literal(lit 'bc');
    BinOp(op '+');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 'a');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'a');
    Literal(lit 'bc');
    BinOp(op '+');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 'c');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'a');
    Literal(lit 'bc');
    BinOp(op '+');
    Literal(lit 3);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3, flag true);
    // Special strings
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'length');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 6);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit '__proto__');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 9);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'length');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 'l');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'length');
    Literal(lit 5);
    ObjectGet();
    Literal(lit 'h');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'length');
    Literal(lit 6);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit '__proto__');
    Literal(lit 0);
    ObjectGet();
    Literal(lit '_');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit '__proto__');
    Literal(lit 8);
    ObjectGet();
    Literal(lit '_');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit '__proto__');
    Literal(lit 9);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3, flag true);
    Literal(lit undefined);
    Return();
}

function basicMultilingualPlaneTests() {
  entry:
    Literal(lit undefined);
    Return();
}

function fullUnicodeTests() {
  entry:
    Literal(lit undefined);
    Return();
}

function run() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'abc');
    Literal(lit 'abc');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit 'cd');
    BinOp(op '+');
    Literal(lit 'ab_cd');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit 'cd');
    BinOp(op '+');
    Literal(lit 'ef');
    BinOp(op '+');
    Literal(lit 'ab_cdef');
    Call(count 3, flag true);
    // Int14
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit 5);
    BinOp(op '+');
    Literal(lit 'ab_5');
    Call(count 3, flag true);
    // Negative
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit -5);
    BinOp(op '+');
    Literal(lit 'ab_-5');
    Call(count 3, flag true);
    // Int32
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit 500000);
    BinOp(op '+');
    Literal(lit 'ab_500000');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit -500000);
    BinOp(op '+');
    Literal(lit 'ab_-500000');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit -2147483648);
    BinOp(op '+');
    Literal(lit 'ab_-2147483648');
    Call(count 3, flag true);
    // Some general constants
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit null);
    BinOp(op '+');
    Literal(lit 'ab_null');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit true);
    BinOp(op '+');
    Literal(lit 'ab_true');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit false);
    BinOp(op '+');
    Literal(lit 'ab_false');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit undefined);
    BinOp(op '+');
    Literal(lit 'ab_undefined');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit -0);
    BinOp(op '+');
    Literal(lit 'ab_0');
    Call(count 3, flag true);
    // Special strings
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit 'proto');
    BinOp(op '+');
    Literal(lit 'ab_proto');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'proto');
    Literal(lit '_bc');
    BinOp(op '+');
    Literal(lit 'proto_bc');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab_');
    Literal(lit 'length');
    BinOp(op '+');
    Literal(lit 'ab_length');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'length');
    Literal(lit '_bc');
    BinOp(op '+');
    Literal(lit 'length_bc');
    Call(count 3, flag true);
    // Interpolation
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit '');
    Literal(lit '');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'abc');
    Literal(lit 'abc');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit '');
    Literal(lit '_');
    BinOp(op '+');
    Literal(lit 'abc');
    BinOp(op '+');
    Literal(lit '_abc');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'abc');
    Literal(lit '_');
    BinOp(op '+');
    Literal(lit 'abc_');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit 'ab');
    Literal(lit 5);
    BinOp(op '+');
    Literal(lit 'c');
    BinOp(op '+');
    Literal(lit 'ab5c');
    Call(count 3, flag true);
    LoadGlobal(name 'testStringPrototypeMethods');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'asciiTests');
    Literal(lit undefined);
    Call(count 1, flag true);
    // The `textSupport` global is set by the test harness depending on the value
    // of MVM_TEXT_SUPPORT in the port file.
    LoadGlobal(name 'global:textSupport');
    Literal(lit 1);
    BinOp(op '===');
    LoadVar(index 0);
    Branch(@block2, @block1);
  block1:
    Pop(count 1);
    LoadGlobal(name 'global:textSupport');
    Literal(lit 2);
    BinOp(op '===');
    Jump(@block2);
  block2:
    Branch(@block3, @block4);
  block3:
    LoadGlobal(name 'basicMultilingualPlaneTests');
    Literal(lit undefined);
    Call(count 1, flag true);
    Jump(@block4);
  block4:
    LoadGlobal(name 'global:textSupport');
    Literal(lit 2);
    BinOp(op '===');
    Branch(@block5, @block6);
  block5:
    LoadGlobal(name 'fullUnicodeTests');
    Literal(lit undefined);
    Call(count 1, flag true);
    Jump(@block6);
  block6:
    Literal(lit undefined);
    Return();
}

function testStringPrototypeMethods() {
  entry:
    Literal(lit undefined);
    Return();
}

