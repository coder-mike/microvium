export 0 = &function run;

slot ['global:Reflect'] = &allocation 3;
slot ['global:assertEqual'] = host function 3;
slot keysBeforeSnapshot = &allocation 13;
slot objBeforeSnapshot = &allocation 12;

function Array_push() {
  entry:
    LoadArg(index 1);
    LoadArg(index 0);
    LoadArg(index 0);
    Literal(lit 'length');
    ObjectGet();
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function ['Reflect.ownKeys']() {
  entry:
    LoadArg(index 1);
    ObjectKeys();
    Return();
}

function run() {
  entry:
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit deleted);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'keysBeforeSnapshot');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 2);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'keysBeforeSnapshot');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 'x');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'keysBeforeSnapshot');
    Literal(lit 1);
    ObjectGet();
    Literal(lit 'y');
    Call(count 3, flag true);
    Literal(lit undefined);
    LoadGlobal(name 'global:Reflect');
    LoadVar(index 4);
    Literal(lit 'ownKeys');
    ObjectGet();
    StoreVar(index 3);
    LoadGlobal(name 'objBeforeSnapshot');
    Call(count 2, flag false);
    StoreVar(index 0);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 2);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 0);
    ObjectGet();
    Literal(lit 'x');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 1);
    ObjectGet();
    Literal(lit 'y');
    Call(count 3, flag true);
    ObjectNew();
    LoadVar(index 3);
    Literal(lit 'a');
    Literal(lit 5);
    ObjectSet();
    LoadVar(index 3);
    Literal(lit 'b');
    Literal(lit 10);
    ObjectSet();
    StoreVar(index 1);
    Literal(lit undefined);
    LoadGlobal(name 'global:Reflect');
    LoadVar(index 4);
    Literal(lit 'ownKeys');
    ObjectGet();
    StoreVar(index 3);
    LoadVar(index 1);
    Call(count 2, flag false);
    StoreVar(index 2);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 2);
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 2);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 2);
    Literal(lit 0);
    ObjectGet();
    Literal(lit 'a');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 2);
    Literal(lit 1);
    ObjectGet();
    Literal(lit 'b');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit undefined);
    LoadGlobal(name 'global:Reflect');
    LoadVar(index 6);
    Literal(lit 'ownKeys');
    ObjectGet();
    StoreVar(index 5);
    ObjectNew();
    Call(count 2, flag false);
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 0);
    Call(count 3, flag true);
    Pop(count 3);
    Literal(lit undefined);
    Return();
}

allocation 12 = {
  x: 5,
  y: 10,
};

allocation 13 = [
  'x',
  'y',
];

allocation 3 = {
  ownKeys: &function ['Reflect.ownKeys'],
};

allocation 7 = {
  push: &function Array_push,
};