[this module slot] 'thisModule'
[free var] 'vmExport'
[free var] 'globalThis'
[free var] 'assertEqual'
[free var] 'foo'
[global slot] 'thisModule'

module with entry 'moduleEntry' {
  [no closure scope]; [0 var declarations]

  bindings { function 'run' # binding_1 @ local[0] }

  references {
    vmExport @ free vmExport
    run @ binding_1
    globalThis @ free globalThis
    assertEqual @ free assertEqual
    globalThis @ free globalThis
    assertEqual @ free assertEqual
    foo @ free foo
    foo @ free foo
    assertEqual @ free assertEqual
    foo @ free foo
    assertEqual @ free assertEqual
    globalThis @ free globalThis
    foo @ free foo
    assertEqual @ free assertEqual
    globalThis @ free globalThis
    assertEqual @ free assertEqual
    foo @ free foo
  }

  prologue { func 'run' -> local[0] }

  function run as 'run' {
    [no closure scope]; [0 var declarations]

    bindings { this '#this' # binding_2 @ arg[0] }

    No references

    prologue {  }

    block {
      sameInstanceCountAsParent: true; [no closure scope]

      bindings {  }

      prologue {  }

      epilogue {  }

      references {
        assertEqual @ free assertEqual
        foo @ free foo
        foo @ free foo
        assertEqual @ free assertEqual
        foo @ free foo
      }
    }
  }
}