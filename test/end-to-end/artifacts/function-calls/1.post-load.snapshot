export 0 = &function run;

slot bar = &function bar;
slot concat = &function concat;
slot foo = &function foo;
slot ['global:print'] = host function 1;

function Array_push() {
  entry:
    LoadArg(index 1);
    LoadVar(index 0);
    LoadArg(index 0);
    LoadArg(index 0);
    Literal(lit 'length');
    ObjectGet();
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function bar() {
  entry:
    LoadArg(index 1);
    LoadArg(index 2);
    LoadVar(index 0);
    Literal(lit undefined);
    Literal(lit 'bar ');
    LoadVar(index 1);
    BinOp(op '+');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function concat() {
  entry:
    LoadArg(index 1);
    LoadArg(index 2);
    LoadArg(index 3);
    LoadVar(index 0);
    Literal(lit ' ');
    BinOp(op '+');
    LoadVar(index 1);
    BinOp(op '+');
    Literal(lit ' ');
    BinOp(op '+');
    LoadVar(index 2);
    BinOp(op '+');
    Return();
}

function foo() {
  entry:
    LoadArg(index 1);
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'foo ');
    LoadVar(index 0);
    BinOp(op '+');
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function run() {
  entry:
    // Basic function
    LoadGlobal(name 'foo');
    Literal(lit undefined);
    Literal(lit 'a');
    Call(count 2);
    Pop(count 1);
    // Higher-order function
    LoadGlobal(name 'bar');
    Literal(lit undefined);
    LoadGlobal(name 'foo');
    Literal(lit 'b');
    Call(count 3);
    Pop(count 1);
    // Arguments and return value
    LoadGlobal(name 'concat');
    Literal(lit undefined);
    Literal(lit 'a');
    Literal(lit 'b');
    Literal(lit 'c');
    Call(count 4);
    LoadGlobal(name 'foo');
    Literal(lit undefined);
    LoadVar(index 0);
    Call(count 2);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 5 = {
  push: &function Array_push,
};