export 0 = &function run;

slot buf1 = &allocation 12;
slot ['global:Microvium'] = &allocation 4;
slot ['global:assertEqual'] = host function 3;

function ['Microvium.newUint8Array']() {
  entry:
    LoadArg(index 1);
    Uint8ArrayNew();
    Return();
}

function run() {
  entry:
    Literal(lit deleted);
    // Reading from compile-time Uint8Array at runtime
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'buf1');
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 5);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'buf1');
    Literal(lit 0);
    ObjectGet();
    Literal(lit 1);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'buf1');
    Literal(lit 4);
    ObjectGet();
    Literal(lit 5);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'buf1');
    Literal(lit 5);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3, flag true);
    // Mutating compile-time Uint8Array at runtime
    Literal(lit 42);
    LoadGlobal(name 'buf1');
    Literal(lit 2);
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'buf1');
    Literal(lit 2);
    ObjectGet();
    Literal(lit 42);
    Call(count 3, flag true);
    // Creating Uint8Array at runtime
    Literal(lit undefined);
    LoadGlobal(name 'global:Microvium');
    LoadVar(index 2);
    Literal(lit 'newUint8Array');
    ObjectGet();
    StoreVar(index 1);
    Literal(lit 3);
    Call(count 2, flag false);
    StoreVar(index 0);
    Literal(lit deleted);
    Literal(lit 0);
    StoreVar(index 1);
    Jump(@block4);
  block4:
    LoadVar(index 1);
    LoadVar(index 0);
    Literal(lit 'length');
    ObjectGet();
    BinOp(op '<');
    Branch(@block5, @block6);
  block5:
    LoadVar(index 1);
    Literal(lit 100);
    BinOp(op '+');
    LoadVar(index 0);
    LoadVar(index 1);
    LoadVar(index 2);
    ObjectSet();
    Pop(count 1);
    LoadVar(index 1);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 1);
    Pop(count 1);
    Pop(count 1);
    Jump(@block4);
  block6:
    Pop(count 1);
    // Writing
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'length');
    ObjectGet();
    Literal(lit 3);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 0);
    ObjectGet();
    Literal(lit 100);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 1);
    ObjectGet();
    Literal(lit 101);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 2);
    ObjectGet();
    Literal(lit 102);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 3);
    ObjectGet();
    Literal(lit undefined);
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function typeCodeOf() {
  entry:
    LoadArg(index 1);
    TypeCodeOf();
    Return();
}

allocation 12 = Uint8Array { 0x01, 0x02, 0x03, 0x04, 0x05 };

allocation 4 = {
  isMicrovium: true,
  newUint8Array: &function ['Microvium.newUint8Array'],
  noOpFunction: no-op-function,
  typeCodeOf: &function typeCodeOf,
};