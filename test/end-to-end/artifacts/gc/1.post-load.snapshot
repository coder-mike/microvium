export 0 = &function run;

slot checkAllocated = &function checkAllocated;
slot function1 = &function function1;
slot garbage = undefined;
slot ['global:assertEqual'] = host function 3;
slot ['global:getHeapUsed'] = host function 4;
slot globalVariable = undefined;
slot heap = undefined;
slot nestedFunction = &function nestedFunction;

function Array_push() {
  entry:
    LoadArg(index 1);
    LoadArg(index 0);
    LoadArg(index 0);
    Literal(lit 'length');
    ObjectGet();
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function checkAllocated() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'global:getHeapUsed');
    Literal(lit undefined);
    Call(count 1, flag false);
    LoadGlobal(name 'heap');
    BinOp(op '-');
    LoadArg(index 1);
    Call(count 3, flag true);
    LoadGlobal(name 'heap');
    LoadArg(index 1);
    BinOp(op '+');
    LoadVar(index 0);
    StoreGlobal(name 'heap');
    Pop(count 1);
    LoadGlobal(name 'garbage');
    LoadArg(index 2);
    BinOp(op '+');
    LoadVar(index 0);
    StoreGlobal(name 'garbage');
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function function1() {
  entry:
    Literal(lit deleted);
    Literal(lit deleted);
    // New array with global reference
    ArrayNew();
    LoadVar(index 2);
    Literal(lit 0);
    Literal(lit 0);
    ObjectSet();
    LoadVar(index 2);
    StoreGlobal(name 'globalVariable');
    Pop(count 1);
    LoadGlobal(name 'checkAllocated');
    Literal(lit undefined);
    Literal(lit 10);
    Literal(lit 0);
    Call(count 3, flag true);
    // New array with local reference
    ArrayNew();
    LoadVar(index 2);
    Literal(lit 0);
    Literal(lit 1);
    ObjectSet();
    StoreVar(index 0);
    LoadGlobal(name 'checkAllocated');
    Literal(lit undefined);
    Literal(lit 10);
    Literal(lit 0);
    Call(count 3, flag true);
    // Resize array
    Literal(lit 42);
    LoadVar(index 0);
    Literal(lit 1);
    LoadVar(index 2);
    ObjectSet();
    Pop(count 1);
    // See setProperty and growArray
    LoadGlobal(name 'checkAllocated');
    Literal(lit undefined);
    Literal(lit 10);
    Literal(lit 4);
    Call(count 3, flag true);
    // New array
    ArrayNew();
    LoadVar(index 2);
    Literal(lit 0);
    Literal(lit 2);
    ObjectSet();
    StoreVar(index 1);
    LoadGlobal(name 'checkAllocated');
    Literal(lit undefined);
    Literal(lit 10);
    Literal(lit 0);
    Call(count 3, flag true);
    // Make eligible for GC
    Literal(lit undefined);
    LoadVar(index 2);
    StoreVar(index 1);
    Pop(count 1);
    LoadGlobal(name 'checkAllocated');
    Literal(lit undefined);
    Literal(lit 0);
    Literal(lit 10);
    Call(count 3, flag true);
    LoadGlobal(name 'nestedFunction');
    Literal(lit undefined);
    Call(count 1, flag true);
    Pop(count 2);
    Literal(lit undefined);
    Return();
}

function nestedFunction() {
  entry:
    Literal(lit deleted);
    Literal(lit deleted);
    // New object. Note that new objects are manufactured empty to start with and
    // then properties are added.
    ObjectNew();
    LoadVar(index 2);
    Literal(lit 'x');
    Literal(lit 3);
    ObjectSet();
    StoreVar(index 0);
    LoadGlobal(name 'checkAllocated');
    Literal(lit undefined);
    Literal(lit 16);
    Literal(lit 6);
    Call(count 3, flag true);
    // Extend object
    Literal(lit 4);
    LoadVar(index 0);
    Literal(lit 'y');
    LoadVar(index 2);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'checkAllocated');
    Literal(lit undefined);
    Literal(lit 10);
    Literal(lit 6);
    Call(count 3, flag true);
    // Extend object
    Literal(lit 5);
    LoadVar(index 0);
    Literal(lit 'z');
    LoadVar(index 2);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'checkAllocated');
    Literal(lit undefined);
    Literal(lit 10);
    Literal(lit 6);
    Call(count 3, flag true);
    // New object
    ObjectNew();
    LoadVar(index 2);
    Literal(lit 'x');
    Literal(lit 6);
    ObjectSet();
    StoreVar(index 1);
    LoadGlobal(name 'checkAllocated');
    Literal(lit undefined);
    Literal(lit 16);
    Literal(lit 6);
    Call(count 3, flag true);
    // Make eligible for GC
    Literal(lit 0);
    LoadVar(index 2);
    StoreVar(index 1);
    Pop(count 1);
    LoadGlobal(name 'checkAllocated');
    Literal(lit undefined);
    Literal(lit 0);
    Literal(lit 10);
    Call(count 3, flag true);
    Pop(count 2);
    Literal(lit undefined);
    Return();
}

// ---
runExportedFunction: 0
nativeOnly: true
testOnly: false
description: Some garbage collection tests
---
// WARNING: these tests don't work if MVM_VERY_EXPENSIVE_MEMORY_CHECKS is
// enabled because it triggers garbage collections at unexpected times.
function run() {
  entry:
    Literal(lit 0);
    LoadVar(index 0);
    StoreGlobal(name 'garbage');
    Pop(count 1);
    LoadGlobal(name 'global:getHeapUsed');
    Literal(lit undefined);
    Call(count 1, flag false);
    LoadVar(index 0);
    StoreGlobal(name 'heap');
    Pop(count 1);
    LoadGlobal(name 'function1');
    Literal(lit undefined);
    Call(count 1, flag true);
    Literal(lit undefined);
    Return();
}

allocation 7 = {
  push: &function Array_push,
};