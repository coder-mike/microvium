export 0 = &function run;

slot ['global:assertEqual'] = host function 3;
slot ['global:print'] = host function 1;
slot test_breakOutOfCatch = &function test_breakOutOfCatch;
slot test_breakOutOfDoubleCatch = &function test_breakOutOfDoubleCatch;
slot test_breakOutOfTry = &function test_breakOutOfTry;
slot test_breakOutOfTryWithClosure = &function test_breakOutOfTryWithClosure;
slot test_catchWithoutThrow = &function test_catchWithoutThrow;
slot test_conditionalThrow = &function test_conditionalThrow;
slot test_exceptionParameter = &function test_exceptionParameter;
slot test_exceptionParameterWithClosure = &function test_exceptionParameterWithClosure;
slot test_minimalTryCatch = &function test_minimalTryCatch;
slot test_normalUnwinding = &function test_normalUnwinding;
slot test_rethrow = &function test_rethrow;
slot test_returnFromTry = &function test_returnFromTry;
slot test_returnInsideNestedCatch = &function test_returnInsideNestedCatch;
slot test_returnInsideNestedTry = &function test_returnInsideNestedTry;
slot test_throwAcrossFrames = &function test_throwAcrossFrames;
slot test_throwUnwinding = &function test_throwUnwinding;
slot test_uncaughtException = &function test_uncaughtException;

function anonymous() {
  entry:
    LoadScoped(index 1);
    Return();
}

function anonymous1() {
  entry:
    LoadScoped(index 2);
    Return();
}

function anonymous2() {
  entry:
    LoadScoped(index 1);
    Return();
}

function functionThatThrows() {
  entry:
    LoadScoped(index 1);
    Literal(lit 'd');
    BinOp(op '+');
    LoadVar(index 0);
    StoreScoped(index 1);
    Pop(count 1);
    // The throw here should unwind the stack to get to the catch block
    Literal(lit 1);
    Throw();
}

function inner() {
  entry:
    LoadScoped(index 1);
    Literal(lit '_inner');
    BinOp(op '+');
    LoadVar(index 0);
    StoreScoped(index 1);
    Pop(count 1);
    StartTry(@block71);
    LoadScoped(index 1);
    Literal(lit '_try2');
    BinOp(op '+');
    LoadVar(index 2);
    StoreScoped(index 1);
    Pop(count 1);
    StartTry(@block69);
    LoadScoped(index 1);
    Literal(lit '_try3');
    BinOp(op '+');
    LoadVar(index 4);
    StoreScoped(index 1);
    Pop(count 1);
    EndTry();
    EndTry();
    Literal(lit '_value');
    Return();
  block69:
    LoadScoped(index 1);
    Literal(lit '_catch3');
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 1);
    Pop(count 1);
    Pop(count 1);
    Jump(@block70);
  block70:
    EndTry();
    Jump(@block72);
  block71:
    LoadScoped(index 1);
    Literal(lit '_catch2');
    BinOp(op '+');
    LoadVar(index 1);
    StoreScoped(index 1);
    Pop(count 1);
    Pop(count 1);
    Jump(@block72);
  block72:
    LoadScoped(index 1);
    Literal(lit 'end');
    BinOp(op '+');
    LoadVar(index 0);
    StoreScoped(index 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function inner1() {
  entry:
    LoadScoped(index 1);
    Literal(lit '_inner');
    BinOp(op '+');
    LoadVar(index 0);
    StoreScoped(index 1);
    Pop(count 1);
    StartTry(@block75);
    LoadScoped(index 1);
    Literal(lit '_try2');
    BinOp(op '+');
    LoadVar(index 2);
    StoreScoped(index 1);
    Pop(count 1);
    Literal(lit '_throw2');
    Throw();
  block75:
    LoadScoped(index 1);
    LoadVar(index 0);
    Literal(lit '_catch2');
    BinOp(op '+');
    BinOp(op '+');
    LoadVar(index 1);
    StoreScoped(index 1);
    Pop(count 1);
    StartTry(@block76);
    LoadScoped(index 1);
    Literal(lit '_try3');
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 1);
    Pop(count 1);
    Literal(lit '_throw3');
    Throw();
  block76:
    LoadScoped(index 1);
    LoadVar(index 1);
    Literal(lit '_catch3');
    BinOp(op '+');
    BinOp(op '+');
    LoadVar(index 2);
    StoreScoped(index 1);
    Pop(count 1);
    Literal(lit '_value');
    Return();
  block77:
    LoadScoped(index 1);
    Literal(lit 'x');
    BinOp(op '+');
    LoadVar(index 1);
    StoreScoped(index 1);
    Pop(count 1);
    Pop(count 1);
    Jump(@block78);
  block78:
    LoadScoped(index 1);
    Literal(lit 'x');
    BinOp(op '+');
    LoadVar(index 0);
    StoreScoped(index 1);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function run() {
  entry:
    LoadGlobal(name 'test_minimalTryCatch');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_catchWithoutThrow');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_throwUnwinding');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_normalUnwinding');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_throwAcrossFrames');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_conditionalThrow');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_exceptionParameter');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_exceptionParameterWithClosure');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_rethrow');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_breakOutOfTry');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_breakOutOfTryWithClosure');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_breakOutOfCatch');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_breakOutOfDoubleCatch');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_returnFromTry');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_returnInsideNestedTry');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_returnInsideNestedCatch');
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadGlobal(name 'test_uncaughtException');
    Literal(lit undefined);
    Call(count 1, flag true);
    Literal(lit undefined);
    Return();
}

function test_breakOutOfCatch() {
  entry:
    Literal(lit undefined);
    Literal(lit undefined);
    Literal(lit undefined);
    Literal(lit undefined);
    Literal(lit undefined);
    Literal(lit undefined);
    Literal(lit deleted);
    Literal(lit 'start');
    StoreVar(index 6);
    Literal(lit undefined);
    StoreVar(index 0);
    Literal(lit deleted);
    Literal(lit 0);
    StoreVar(index 7);
    Jump(@block47);
  block47:
    LoadVar(index 7);
    Literal(lit 100);
    BinOp(op '<');
    Branch(@block48, @block55);
  block48:
    Literal(lit deleted);
    // Stack depth 2
    LoadVar(index 6);
    Literal(lit '_i');
    LoadVar(index 7);
    BinOp(op '+');
    BinOp(op '+');
    LoadVar(index 9);
    StoreVar(index 6);
    Pop(count 1);
    Literal(lit undefined);
    StoreVar(index 8);
    Literal(lit undefined);
    StoreVar(index 1);
    // Stack depth 3
    StartTry(@block53);
    Literal(lit deleted);
    // Stack depth 5
    Literal(lit undefined);
    StoreVar(index 11);
    Literal(lit undefined);
    StoreVar(index 2);
    // Stack depth 6
    StartTry(@block51);
    Literal(lit deleted);
    // Stack depth 8
    Literal(lit undefined);
    StoreVar(index 14);
    Literal(lit undefined);
    StoreVar(index 3);
    // Stack depth 9
    LoadVar(index 7);
    Literal(lit 2);
    BinOp(op '===');
    Branch(@block49, @block50);
  block49:
    Literal(lit deleted);
    Literal(lit undefined);
    StoreVar(index 15);
    Literal(lit undefined);
    StoreVar(index 4);
    // Stack depth 10
    LoadVar(index 6);
    Literal(lit '_throw');
    BinOp(op '+');
    LoadVar(index 16);
    StoreVar(index 6);
    Pop(count 1);
    ObjectNew();
    LoadVar(index 16);
    Literal(lit 'message');
    Literal(lit 'boo!');
    ObjectSet();
    Throw();
  block50:
    EndTry();
    Jump(@block52);
  block51:
    Literal(lit undefined);
    Literal(lit deleted);
    Literal(lit undefined);
    StoreVar(index 14);
    Literal(lit undefined);
    StoreVar(index 13);
    LoadVar(index 6);
    Literal(lit '_catch1');
    BinOp(op '+');
    LoadVar(index 15);
    StoreVar(index 6);
    Pop(count 1);
    // The break here should pop `x`, `e1`, `b`, and `a` off the stack but
    // not the inner `try` since we're already outside the try block. But it
    // should also pop the outer `catch` since that's still on the stack.
    // The break itself should not pop `i` or `flow`. `i` is popped by the
    // loop exit sequence, which is what we're jumping to with the break.
    Pop(count 3);
    EndTry();
    Pop(count 1);
    Jump(@block55);
  // The break here should pop `x`, `e1`, `b`, and `a` off the stack but
  // not the inner `try` since we're already outside the try block. But it
  // should also pop the outer `catch` since that's still on the stack.
  // The break itself should not pop `i` or `flow`. `i` is popped by the
  // loop exit sequence, which is what we're jumping to with the break.
  block52:
    EndTry();
    Jump(@block54);
  block53:
    Literal(lit undefined);
    Literal(lit undefined);
    StoreVar(index 10);
    // This should never execute
    LoadVar(index 6);
    Literal(lit '_catch2');
    BinOp(op '+');
    LoadVar(index 11);
    StoreVar(index 6);
    Pop(count 1);
    Pop(count 2);
    Jump(@block54);
  block54:
    Literal(lit undefined);
    StoreVar(index 5);
    // This should execute once
    LoadVar(index 6);
    Literal(lit '_loopEnd');
    BinOp(op '+');
    LoadVar(index 9);
    StoreVar(index 6);
    Pop(count 1);
    Pop(count 1);
    LoadVar(index 7);
    LoadVar(index 8);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 9);
    StoreVar(index 7);
    Pop(count 1);
    Pop(count 1);
    Jump(@block47);
  block55:
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 6);
    Literal(lit 'start_i0_loopEnd_i1_loopEnd_i2_throw_catch1');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_breakOutOfDoubleCatch() {
  entry:
    Literal(lit deleted);
    Literal(lit 'start');
    StoreVar(index 0);
    Literal(lit deleted);
    Literal(lit 0);
    StoreVar(index 1);
    Jump(@block56);
  block56:
    LoadVar(index 1);
    Literal(lit 100);
    BinOp(op '<');
    Branch(@block57, @block64);
  block57:
    LoadVar(index 0);
    Literal(lit '_i');
    LoadVar(index 1);
    BinOp(op '+');
    BinOp(op '+');
    LoadVar(index 2);
    StoreVar(index 0);
    Pop(count 1);
    StartTry(@block62);
    LoadVar(index 0);
    Literal(lit '_try');
    BinOp(op '+');
    LoadVar(index 4);
    StoreVar(index 0);
    Pop(count 1);
    StartTry(@block60);
    LoadVar(index 0);
    Literal(lit '_try');
    BinOp(op '+');
    LoadVar(index 6);
    StoreVar(index 0);
    Pop(count 1);
    LoadVar(index 1);
    Literal(lit 1);
    BinOp(op '===');
    Branch(@block58, @block59);
  block58:
    LoadVar(index 0);
    Literal(lit '_throw');
    BinOp(op '+');
    LoadVar(index 6);
    StoreVar(index 0);
    Pop(count 1);
    Literal(lit 'foo');
    Throw();
  block59:
    EndTry();
    Jump(@block61);
  block60:
    LoadVar(index 0);
    Literal(lit '_catch1');
    BinOp(op '+');
    LoadVar(index 5);
    StoreVar(index 0);
    Pop(count 1);
    Pop(count 1);
    EndTry();
    Jump(@block64);
  block61:
    EndTry();
    Jump(@block63);
  block62:
    Pop(count 1);
    // Should not get here
    LoadVar(index 0);
    Literal(lit '_catch2');
    BinOp(op '+');
    LoadVar(index 2);
    StoreVar(index 0);
    Pop(count 1);
    Jump(@block63);
  block63:
    LoadVar(index 0);
    Literal(lit '_loopEnd');
    BinOp(op '+');
    LoadVar(index 2);
    StoreVar(index 0);
    Pop(count 1);
    LoadVar(index 1);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 1);
    Pop(count 1);
    Pop(count 1);
    Jump(@block56);
  block64:
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'start_i0_try_try_loopEnd_i1_try_try_throw_catch1');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_breakOutOfTry() {
  entry:
    Literal(lit deleted);
    Literal(lit 'start');
    StoreVar(index 0);
    Literal(lit deleted);
    Literal(lit 0);
    StoreVar(index 1);
    Jump(@block33);
  block33:
    LoadVar(index 1);
    Literal(lit 100);
    BinOp(op '<');
    Branch(@block34, @block39);
  block34:
    LoadVar(index 0);
    Literal(lit '_i');
    LoadVar(index 1);
    BinOp(op '+');
    BinOp(op '+');
    LoadVar(index 2);
    StoreVar(index 0);
    Pop(count 1);
    StartTry(@block37);
    LoadVar(index 1);
    Literal(lit 2);
    BinOp(op '===');
    Branch(@block35, @block36);
  block35:
    Literal(lit deleted);
    Literal(lit undefined);
    StoreVar(index 4);
    LoadVar(index 0);
    Literal(lit '_break');
    BinOp(op '+');
    LoadVar(index 5);
    StoreVar(index 0);
    Pop(count 1);
    // The break here should pop `x` off the stack, `EndTry`, but should not
    // pop the loop variable because the break jumps to the loops
    // terminating block which pops the loop variable.
    Pop(count 1);
    EndTry();
    Jump(@block39);
  block36:
    EndTry();
    Jump(@block38);
  block37:
    Pop(count 1);
    // This should never execute
    LoadVar(index 0);
    Literal(lit '_catch');
    BinOp(op '+');
    LoadVar(index 2);
    StoreVar(index 0);
    Pop(count 1);
    Jump(@block38);
  block38:
    // This should execute once
    LoadVar(index 0);
    Literal(lit '_loopEnd');
    BinOp(op '+');
    LoadVar(index 2);
    StoreVar(index 0);
    Pop(count 1);
    LoadVar(index 1);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 1);
    Pop(count 1);
    Pop(count 1);
    Jump(@block33);
  block39:
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'start_i0_loopEnd_i1_loopEnd_i2_break');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_breakOutOfTryWithClosure() {
  entry:
    Literal(lit deleted);
    Literal(lit 'start');
    StoreVar(index 0);
    ScopeNew(count 1);
    Literal(lit 0);
    StoreScoped(index 0);
    Jump(@block40);
  block40:
    LoadScoped(index 0);
    Literal(lit 100);
    BinOp(op '<');
    Branch(@block41, @block46);
  block41:
    ScopePush(count 2);
    LoadVar(index 0);
    Literal(lit '_i');
    LoadScoped(index 2);
    BinOp(op '+');
    BinOp(op '+');
    LoadVar(index 1);
    StoreVar(index 0);
    Pop(count 1);
    // This forces loop variable `i` to be closure allocated
    Literal(lit &function anonymous1);
    StoreScoped(index 0);
    LoadReg(name 'closure');
    Pop(count 1);
    StartTry(@block44);
    LoadScoped(index 2);
    Literal(lit 2);
    BinOp(op '===');
    Branch(@block42, @block43);
  block42:
    Literal(lit deleted);
    Literal(lit undefined);
    StoreVar(index 3);
    LoadVar(index 0);
    Literal(lit '_break');
    BinOp(op '+');
    LoadVar(index 4);
    StoreVar(index 0);
    Pop(count 1);
    // The break here should pop `x` off the stack, `EndTry`, but should not
    // pop the closure scope because the break jumps to the loops
    // terminating block which pops the closure scope.
    Pop(count 1);
    EndTry();
    ScopePop();
    Jump(@block46);
  block43:
    EndTry();
    Jump(@block45);
  block44:
    Pop(count 1);
    // This should never execute
    LoadVar(index 0);
    Literal(lit '_catch');
    BinOp(op '+');
    LoadVar(index 1);
    StoreVar(index 0);
    Pop(count 1);
    Jump(@block45);
  block45:
    // This should execute once
    LoadVar(index 0);
    Literal(lit '_loopEnd');
    BinOp(op '+');
    LoadVar(index 1);
    StoreVar(index 0);
    Pop(count 1);
    ScopePop();
    ScopeClone();
    LoadScoped(index 0);
    LoadVar(index 1);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 2);
    StoreScoped(index 0);
    Pop(count 1);
    Pop(count 1);
    Jump(@block40);
  block46:
    ScopeDiscard();
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'start_i0_loopEnd_i1_loopEnd_i2_break');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_catchWithoutThrow() {
  entry:
    Literal(lit deleted);
    // When an exception isn't thrown, the try block epilog needs to correctly unwind
    // with `EndTry`
    Literal(lit '');
    StoreVar(index 0);
    StartTry(@block3);
    LoadVar(index 0);
    Literal(lit 'a');
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 0);
    Pop(count 1);
    LoadVar(index 0);
    Literal(lit 'b');
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 0);
    Pop(count 1);
    EndTry();
    Jump(@block4);
  block3:
    Pop(count 1);
    LoadVar(index 0);
    Literal(lit 'c');
    BinOp(op '+');
    LoadVar(index 1);
    StoreVar(index 0);
    Pop(count 1);
    Jump(@block4);
  block4:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'ab');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_conditionalThrow() {
  entry:
    Literal(lit deleted);
    // This test is mainly to make sure that the static analysis does not think that
    // the code after the if-statement is unreachable if one of the branches is
    // unreachable.
    Literal(lit '');
    StoreVar(index 0);
    Literal(lit deleted);
    Literal(lit 0);
    StoreVar(index 1);
    Jump(@block15);
  block15:
    LoadVar(index 1);
    Literal(lit 4);
    BinOp(op '<');
    Branch(@block16, @block24);
  block16:
    LoadVar(index 0);
    LoadVar(index 1);
    BinOp(op '+');
    LoadVar(index 2);
    StoreVar(index 0);
    Pop(count 1);
    StartTry(@block22);
    LoadVar(index 0);
    Literal(lit 'a');
    BinOp(op '+');
    LoadVar(index 4);
    StoreVar(index 0);
    Pop(count 1);
    // Check throwing in the consequent branch
    LoadVar(index 1);
    Literal(lit 3);
    BinOp(op '%');
    Literal(lit 0);
    BinOp(op '===');
    Branch(@block17, @block18);
  block17:
    LoadVar(index 0);
    Literal(lit 'b');
    BinOp(op '+');
    LoadVar(index 4);
    StoreVar(index 0);
    Pop(count 1);
    Literal(lit 1);
    Throw();
  block18:
    LoadVar(index 0);
    Literal(lit 'c');
    BinOp(op '+');
    LoadVar(index 4);
    StoreVar(index 0);
    Pop(count 1);
    // Check throwing in the alternate branch
    LoadVar(index 1);
    Literal(lit 3);
    BinOp(op '%');
    Literal(lit 1);
    BinOp(op '!==');
    // Check throwing in the alternate branch
    Branch(@block19, @block20);
  block19:
    LoadVar(index 0);
    Literal(lit 'd');
    BinOp(op '+');
    LoadVar(index 4);
    StoreVar(index 0);
    Pop(count 1);
    Jump(@block21);
  block20:
    LoadVar(index 0);
    Literal(lit 'e');
    BinOp(op '+');
    LoadVar(index 4);
    StoreVar(index 0);
    Pop(count 1);
    Literal(lit 2);
    Throw();
  block21:
    // The static analysis needs to
    LoadVar(index 0);
    Literal(lit 'f');
    BinOp(op '+');
    LoadVar(index 4);
    StoreVar(index 0);
    Pop(count 1);
    EndTry();
    Jump(@block23);
  block22:
    Pop(count 1);
    LoadVar(index 0);
    Literal(lit 'g');
    BinOp(op '+');
    LoadVar(index 2);
    StoreVar(index 0);
    Pop(count 1);
    Jump(@block23);
  block23:
    LoadVar(index 0);
    Literal(lit 'h');
    BinOp(op '+');
    LoadVar(index 2);
    StoreVar(index 0);
    Pop(count 1);
    LoadVar(index 1);
    LoadVar(index 2);
    Literal(lit 1);
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 1);
    Pop(count 1);
    Pop(count 1);
    Jump(@block15);
  block24:
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit '0abgh1acegh2acdfh3abgh');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_exceptionParameter() {
  entry:
    Literal(lit undefined);
    Literal(lit undefined);
    Literal(lit deleted);
    Literal(lit 1);
    StoreVar(index 2);
    Literal(lit undefined);
    StoreVar(index 0);
    StartTry(@block25);
    Literal(lit deleted);
    Literal(lit undefined);
    StoreVar(index 5);
    Literal(lit undefined);
    StoreVar(index 1);
    Literal(lit 42);
    Throw();
  block25:
    Literal(lit undefined);
    Literal(lit deleted);
    Literal(lit undefined);
    StoreVar(index 5);
    Literal(lit undefined);
    StoreVar(index 4);
    LoadVar(index 3);
    LoadVar(index 6);
    StoreVar(index 2);
    Pop(count 1);
    Pop(count 3);
    Jump(@block26);
  block26:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 2);
    Literal(lit 42);
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_exceptionParameterWithClosure() {
  entry:
    ScopeNew(count 2);
    Literal(lit undefined);
    Literal(lit undefined);
    Literal(lit deleted);
    Literal(lit deleted);
    Literal(lit 1);
    StoreVar(index 2);
    Literal(lit undefined);
    StoreVar(index 3);
    Literal(lit undefined);
    StoreVar(index 0);
    StartTry(@block27);
    Literal(lit deleted);
    Literal(lit undefined);
    StoreVar(index 6);
    Literal(lit undefined);
    StoreVar(index 1);
    Literal(lit 42);
    Throw();
  block27:
    StoreScoped(index 1);
    Literal(lit undefined);
    Literal(lit deleted);
    Literal(lit undefined);
    StoreVar(index 5);
    Literal(lit undefined);
    StoreVar(index 4);
    LoadScoped(index 1);
    LoadVar(index 6);
    StoreVar(index 2);
    Pop(count 1);
    Literal(lit &function anonymous);
    StoreScoped(index 0);
    LoadReg(name 'closure');
    LoadVar(index 6);
    StoreVar(index 3);
    Pop(count 1);
    Pop(count 2);
    Jump(@block28);
  block28:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 2);
    Literal(lit 42);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 3);
    Literal(lit undefined);
    Call(count 1, flag false);
    Literal(lit 42);
    Call(count 3, flag true);
    Pop(count 2);
    Literal(lit undefined);
    Return();
}

function test_minimalTryCatch() {
  entry:
    Literal(lit deleted);
    Literal(lit '');
    StoreVar(index 0);
    // The try will emit the instruction `StartTry` to push to the exception stack
    StartTry(@block1);
    LoadVar(index 0);
    Literal(lit 'a');
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 0);
    Pop(count 1);
    // The throw will emit the `Throw` instruction which should unwind the stack
    // and jump to the catch block.
    Literal(lit 'boo!');
    Throw();
  block1:
    Pop(count 1);
    // (Entry into the catch should pop the exception since it's unused)
    LoadVar(index 0);
    Literal(lit 'c');
    BinOp(op '+');
    LoadVar(index 1);
    StoreVar(index 0);
    Pop(count 1);
    Jump(@block2);
  block2:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'ac');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_normalUnwinding() {
  entry:
    Literal(lit deleted);
    Literal(lit '');
    StoreVar(index 0);
    StartTry(@block11);
    LoadVar(index 0);
    Literal(lit 'a');
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 0);
    Pop(count 1);
    StartTry(@block9);
    LoadVar(index 0);
    Literal(lit 'b');
    BinOp(op '+');
    LoadVar(index 5);
    StoreVar(index 0);
    Pop(count 1);
    LoadVar(index 0);
    Literal(lit 'c');
    BinOp(op '+');
    LoadVar(index 5);
    StoreVar(index 0);
    Pop(count 1);
    EndTry();
    Jump(@block10);
  block9:
    Pop(count 1);
    LoadVar(index 0);
    Literal(lit 'd');
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 0);
    Pop(count 1);
    Jump(@block10);
  block10:
    LoadVar(index 0);
    Literal(lit 'e');
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 0);
    Pop(count 1);
    // The above `try` ends with an `EndTry` operation rather than `Throw`,
    // because it doesn't throw. The `EndTry` should pop the exception stack.
    // The following `throw` then checks that we're using the popped catch
    // target (g) and not the original (d).
    Literal(lit 2);
    Throw();
  block11:
    Pop(count 1);
    LoadVar(index 0);
    Literal(lit 'g');
    BinOp(op '+');
    LoadVar(index 1);
    StoreVar(index 0);
    Pop(count 1);
    Jump(@block12);
  block12:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'abceg');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_rethrow() {
  entry:
    StartTry(@block31);
    StartTry(@block29);
    ObjectNew();
    LoadVar(index 4);
    Literal(lit 'message');
    Literal(lit 'boo!');
    ObjectSet();
    Throw();
  block29:
    LoadVar(index 2);
    Throw();
  block30:
    EndTry();
    Jump(@block32);
  block31:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'message');
    ObjectGet();
    Literal(lit 'boo!');
    Call(count 3, flag true);
    Pop(count 1);
    Jump(@block32);
  block32:
    Literal(lit undefined);
    Return();
}

function test_returnFromTry() {
  entry:
    ScopeNew(count 2);
    Literal(lit &function test_returnFromTry_inner);
    StoreScoped(index 0);
    LoadReg(name 'closure');
    Literal(lit 'start');
    StoreScoped(index 1);
    StartTry(@block67);
    LoadVar(index 0);
    Literal(lit undefined);
    Call(count 1, flag true);
    // The key thing here is that the `return` inside the inner function must
    // have popped exactly one try block off the stack, leaving the outer one.
    // If it fails to EndTry, this throw will be completely broken.
    Literal(lit '_outer_try');
    Throw();
  block67:
    // Should get here
    LoadScoped(index 1);
    Literal(lit '_outer_catch');
    BinOp(op '+');
    LoadVar(index 2);
    StoreScoped(index 1);
    Pop(count 1);
    Pop(count 1);
    Jump(@block68);
  block68:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 1);
    Literal(lit 'start_inner_inner_try_return_outer_catch');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_returnFromTry_inner() {
  entry:
    ScopePush(count 3);
    Literal(lit undefined);
    Literal(lit undefined);
    LoadScoped(index 4);
    Literal(lit '_inner');
    BinOp(op '+');
    LoadVar(index 2);
    StoreScoped(index 4);
    Pop(count 1);
    Literal(lit undefined);
    StoreVar(index 0);
    Literal(lit undefined);
    StoreScoped(index 1);
    Literal(lit &function anonymous2);
    StoreScoped(index 0);
    LoadReg(name 'closure');
    Pop(count 1);
    // Force inner func to be a closure
    // Stack depth 2 (a, c)
    StartTry(@block65);
    Literal(lit deleted);
    // Stack depth 4
    LoadScoped(index 4);
    Literal(lit '_inner_try');
    BinOp(op '+');
    LoadVar(index 5);
    StoreScoped(index 4);
    Pop(count 1);
    Literal(lit undefined);
    StoreVar(index 1);
    Literal(lit undefined);
    StoreVar(index 4);
    // Stack depth 5
    LoadScoped(index 4);
    Literal(lit '_return');
    BinOp(op '+');
    LoadVar(index 5);
    StoreScoped(index 4);
    Pop(count 1);
    // The return statement must emit an EndTry. It does not need to pop `c`,
    // `d`, `a`, or `b` off the stack because the return opcode will do this,
    // but the return opcode does not pop the try. It also does not need to
    // PopScope because this also automatically happens upon a return
    EndTry();
    Literal(lit undefined);
    Return();
  // The return statement must emit an EndTry. It does not need to pop `c`,
  // `d`, `a`, or `b` off the stack because the return opcode will do this,
  // but the return opcode does not pop the try. It also does not need to
  // PopScope because this also automatically happens upon a return
  block65:
    Literal(lit undefined);
    Literal(lit deleted);
    // Should not get here
    LoadScoped(index 4);
    Literal(lit '_inner_catch');
    BinOp(op '+');
    LoadVar(index 5);
    StoreScoped(index 4);
    Pop(count 1);
    Literal(lit undefined);
    StoreVar(index 3);
    Literal(lit undefined);
    StoreVar(index 4);
    Pop(count 3);
    Jump(@block66);
  block66:
    // Should not get here
    LoadScoped(index 4);
    Literal(lit '_end_inner');
    BinOp(op '+');
    LoadVar(index 2);
    StoreScoped(index 4);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_returnInsideNestedCatch() {
  entry:
    ScopeNew(count 2);
    Literal(lit &function inner1);
    StoreScoped(index 0);
    LoadReg(name 'closure');
    Literal(lit 'start');
    StoreScoped(index 1);
    StartTry(@block79);
    Literal(lit deleted);
    LoadScoped(index 1);
    Literal(lit '_try1');
    BinOp(op '+');
    LoadVar(index 4);
    StoreScoped(index 1);
    Pop(count 1);
    LoadVar(index 0);
    Literal(lit undefined);
    Call(count 1, flag false);
    StoreVar(index 3);
    LoadScoped(index 1);
    LoadVar(index 3);
    BinOp(op '+');
    LoadVar(index 4);
    StoreScoped(index 1);
    Pop(count 1);
    Literal(lit '_throw1');
    Throw();
  block79:
    LoadScoped(index 1);
    LoadVar(index 1);
    Literal(lit '_catch1');
    BinOp(op '+');
    BinOp(op '+');
    LoadVar(index 2);
    StoreScoped(index 1);
    Pop(count 1);
    Pop(count 1);
    Jump(@block80);
  block80:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 1);
    Literal(lit 'start_try1_inner_try2_throw2_catch2_try3_throw3_catch3_value_throw1_catch1');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_returnInsideNestedTry() {
  entry:
    ScopeNew(count 2);
    Literal(lit &function inner);
    StoreScoped(index 0);
    LoadReg(name 'closure');
    Literal(lit 'start');
    StoreScoped(index 1);
    StartTry(@block73);
    Literal(lit deleted);
    LoadScoped(index 1);
    Literal(lit '_try1');
    BinOp(op '+');
    LoadVar(index 4);
    StoreScoped(index 1);
    Pop(count 1);
    LoadVar(index 0);
    Literal(lit undefined);
    Call(count 1, flag false);
    StoreVar(index 3);
    LoadScoped(index 1);
    LoadVar(index 3);
    BinOp(op '+');
    LoadVar(index 4);
    StoreScoped(index 1);
    Pop(count 1);
    Literal(lit '_thrown');
    Throw();
  block73:
    LoadScoped(index 1);
    Literal(lit '_catch1');
    LoadVar(index 1);
    BinOp(op '+');
    BinOp(op '+');
    LoadVar(index 2);
    StoreScoped(index 1);
    Pop(count 1);
    Pop(count 1);
    Jump(@block74);
  block74:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 1);
    Literal(lit 'start_try1_inner_try2_try3_value_catch1_thrown');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_throwAcrossFrames() {
  entry:
    ScopeNew(count 2);
    Literal(lit &function functionThatThrows);
    StoreScoped(index 0);
    LoadReg(name 'closure');
    Literal(lit '');
    StoreScoped(index 1);
    StartTry(@block13);
    LoadScoped(index 1);
    Literal(lit 'a');
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 1);
    Pop(count 1);
    LoadVar(index 0);
    Literal(lit undefined);
    Call(count 1, flag true);
    LoadScoped(index 1);
    Literal(lit 'b');
    BinOp(op '+');
    LoadVar(index 3);
    StoreScoped(index 1);
    Pop(count 1);
    EndTry();
    Jump(@block14);
  block13:
    Pop(count 1);
    LoadScoped(index 1);
    Literal(lit 'c');
    BinOp(op '+');
    LoadVar(index 1);
    StoreScoped(index 1);
    Pop(count 1);
    Jump(@block14);
  block14:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadScoped(index 1);
    Literal(lit 'adc');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_throwUnwinding() {
  entry:
    Literal(lit deleted);
    Literal(lit '');
    StoreVar(index 0);
    StartTry(@block7);
    LoadVar(index 0);
    Literal(lit 'a');
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 0);
    Pop(count 1);
    StartTry(@block5);
    LoadVar(index 0);
    Literal(lit 'b');
    BinOp(op '+');
    LoadVar(index 5);
    StoreVar(index 0);
    Pop(count 1);
    Literal(lit 1);
    Throw();
  block5:
    Pop(count 1);
    LoadVar(index 0);
    Literal(lit 'd');
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 0);
    Pop(count 1);
    Jump(@block6);
  block6:
    LoadVar(index 0);
    Literal(lit 'e');
    BinOp(op '+');
    LoadVar(index 3);
    StoreVar(index 0);
    Pop(count 1);
    // The above `try` and corresponding `throw 1` should push and pop the
    // exception stack respectively. The following `throw` then checks that
    // we're using the popped catch target (g) and not the original (d).
    Literal(lit 2);
    Throw();
  block7:
    Pop(count 1);
    LoadVar(index 0);
    Literal(lit 'g');
    BinOp(op '+');
    LoadVar(index 1);
    StoreVar(index 0);
    Pop(count 1);
    Jump(@block8);
  block8:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'abdeg');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function test_uncaughtException() {
  entry:
    LoadGlobal(name 'global:print');
    Literal(lit undefined);
    Literal(lit 'foo');
    Call(count 2, flag true);
    // Should print
    Literal(lit 'My uncaught exception');
    Throw();
}

