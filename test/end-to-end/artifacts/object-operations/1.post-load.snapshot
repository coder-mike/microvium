export 0 = &function run;

slot foo2 = &function foo2;
slot ['global:Object'] = &allocation 3;
slot ['global:assertEqual'] = host function 3;
slot objBeforeSnapshot = &allocation 8;

function Array_push() {
  entry:
    LoadArg(index 1);
    LoadVar(index 0);
    LoadArg(index 0);
    LoadArg(index 0);
    Literal(lit 'length');
    ObjectGet();
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

function defaultObjectStringify() {
  entry:
    Literal(lit '[object ');
    LoadArg(index 0);
    Literal(lit 'constructor');
    ObjectGet();
    Literal(lit 'name');
    ObjectGet();
    BinOp(op '+');
    LoadVar(index 0);
    Branch(@block2, @block1);
  block1:
    Pop(count 1);
    Literal(lit 'Object');
    Literal(lit ']');
    BinOp(op '+');
    Jump(@block2);
  block2:
    Return();
}

function foo() {
  entry:
    LoadArg(index 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 17);
    Call(count 3);
    Pop(count 1);
    Literal(lit 18);
    Return();
}

function foo2() {
  entry:
    LoadArg(index 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 19);
    Call(count 3);
    Pop(count 1);
    Literal(lit 20);
    Return();
}

function run() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'x');
    ObjectGet();
    Literal(lit 5);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'y');
    ObjectGet();
    Literal(lit 10);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'z');
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Method call
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'objBeforeSnapshot');
    LoadVar(index 2);
    Literal(lit 'f');
    ObjectGet();
    LoadVar(index 2);
    Literal(lit 17);
    Call(count 2);
    StoreVar(index 2);
    Literal(lit 18);
    Call(count 3);
    Pop(count 1);
    // Set existing property on snapshotted object
    Literal(lit 12);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'x');
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'x');
    ObjectGet();
    Literal(lit 12);
    Call(count 3);
    Pop(count 1);
    // Create new property on snapshotted object
    Literal(lit 13);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'z');
    LoadVar(index 0);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'z');
    ObjectGet();
    Literal(lit 13);
    Call(count 3);
    Pop(count 1);
    // New empty object
    ObjectNew();
    LoadVar(index 0);
    Literal(lit '__proto__');
    LoadGlobal(name 'global:Object');
    Literal(lit 'prototype');
    ObjectGet();
    ObjectSet();
    LoadVar(index 0);
    Literal(lit 'a');
    Literal(lit 14);
    ObjectSet();
    LoadVar(index 0);
    Literal(lit 'b');
    Literal(lit 15);
    ObjectSet();
    LoadVar(index 0);
    Literal(lit 'f');
    LoadGlobal(name 'foo2');
    ObjectSet();
    Literal(lit 16);
    LoadVar(index 0);
    Literal(lit 'c');
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'a');
    ObjectGet();
    Literal(lit 14);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'b');
    ObjectGet();
    Literal(lit 15);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'c');
    ObjectGet();
    Literal(lit 16);
    Call(count 3);
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'd');
    ObjectGet();
    Literal(lit undefined);
    Call(count 3);
    Pop(count 1);
    // Method call
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    LoadVar(index 3);
    Literal(lit 'f');
    ObjectGet();
    LoadVar(index 3);
    Literal(lit 19);
    Call(count 2);
    StoreVar(index 3);
    Literal(lit 20);
    Call(count 3);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 3 = {
  prototype: &allocation 4,
};

allocation 4 = {
  constructor: &allocation 3,
  toString: &function defaultObjectStringify,
};

allocation 5 = {
  push: &function Array_push,
};

allocation 8 = {
  f: &function foo,
  x: 5,
  y: 10,
};