export 0 = &function run;

slot foo2 = &function foo2;
slot ['global:assertEqual'] = host function 3;
slot objBeforeSnapshot = &allocation 12;

function foo() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadArg(index 1);
    Literal(lit 17);
    Call(count 3, flag true);
    Literal(lit 18);
    Return();
}

function foo2() {
  entry:
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadArg(index 1);
    Literal(lit 19);
    Call(count 3, flag true);
    Literal(lit 20);
    Return();
}

function run() {
  entry:
    Literal(lit deleted);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'x');
    ObjectGet();
    Literal(lit 5);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'y');
    ObjectGet();
    Literal(lit 10);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'z');
    ObjectGet();
    Literal(lit undefined);
    Call(count 3, flag true);
    // Method call
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit undefined);
    LoadGlobal(name 'objBeforeSnapshot');
    LoadVar(index 4);
    Literal(lit 'f');
    ObjectGet();
    StoreVar(index 3);
    Literal(lit 17);
    Call(count 2, flag false);
    Literal(lit 18);
    Call(count 3, flag true);
    // Set existing property on snapshotted object
    Literal(lit 12);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'x');
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'x');
    ObjectGet();
    Literal(lit 12);
    Call(count 3, flag true);
    // Create new property on snapshotted object
    Literal(lit 13);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'z');
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadGlobal(name 'objBeforeSnapshot');
    Literal(lit 'z');
    ObjectGet();
    Literal(lit 13);
    Call(count 3, flag true);
    // New empty object
    ObjectNew();
    LoadVar(index 1);
    Literal(lit 'a');
    Literal(lit 14);
    ObjectSet();
    LoadVar(index 1);
    Literal(lit 'b');
    Literal(lit 15);
    ObjectSet();
    LoadVar(index 1);
    Literal(lit 'f');
    LoadGlobal(name 'foo2');
    ObjectSet();
    StoreVar(index 0);
    Literal(lit 16);
    LoadVar(index 0);
    Literal(lit 'c');
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'a');
    ObjectGet();
    Literal(lit 14);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'b');
    ObjectGet();
    Literal(lit 15);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'c');
    ObjectGet();
    Literal(lit 16);
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'd');
    ObjectGet();
    Literal(lit undefined);
    Call(count 3, flag true);
    // Method call
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    Literal(lit undefined);
    LoadVar(index 0);
    LoadVar(index 4);
    Literal(lit 'f');
    ObjectGet();
    StoreVar(index 3);
    Literal(lit 19);
    Call(count 2, flag false);
    Literal(lit 20);
    Call(count 3, flag true);
    Literal(lit 'obj');
    LoadVar(index 0);
    Literal(lit 'n');
    Literal(lit 'ame');
    BinOp(op '+');
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'name');
    ObjectGet();
    Literal(lit 'obj');
    Call(count 3, flag true);
    // The string "name1" (and "name2") doesn't occur in the source text, so it's
    // not in the intern table in the bytecode, but it still needs to be in the
    // runtime intern table.
    Literal(lit 'obj1');
    LoadVar(index 0);
    Literal(lit 'n');
    Literal(lit 'ame1');
    BinOp(op '+');
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    Literal(lit 'obj2');
    LoadVar(index 0);
    Literal(lit 'n');
    Literal(lit 'ame2');
    BinOp(op '+');
    LoadVar(index 1);
    ObjectSet();
    Pop(count 1);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'n');
    Literal(lit 'ame1');
    BinOp(op '+');
    ObjectGet();
    Literal(lit 'obj1');
    Call(count 3, flag true);
    LoadGlobal(name 'global:assertEqual');
    Literal(lit undefined);
    LoadVar(index 0);
    Literal(lit 'n');
    Literal(lit 'ame2');
    BinOp(op '+');
    ObjectGet();
    Literal(lit 'obj2');
    Call(count 3, flag true);
    Pop(count 1);
    Literal(lit undefined);
    Return();
}

allocation 12 = {
  f: &function foo,
  x: 5,
  y: 10,
};