#include "error_descriptions.hh"

std::map<mvm_TeError, std::string> errorDescriptions = {
  { MVM_E_SUCCESS, "MVM_E_SUCCESS" },
  { MVM_E_UNEXPECTED, "MVM_E_UNEXPECTED" },
  { MVM_E_MALLOC_FAIL, "MVM_E_MALLOC_FAIL" },
  { MVM_E_ALLOCATION_TOO_LARGE, "MVM_E_ALLOCATION_TOO_LARGE" },
  { MVM_E_INVALID_ADDRESS, "MVM_E_INVALID_ADDRESS" },
  { MVM_E_COPY_ACROSS_BUCKET_BOUNDARY, "MVM_E_COPY_ACROSS_BUCKET_BOUNDARY" },
  { MVM_E_FUNCTION_NOT_FOUND, "MVM_E_FUNCTION_NOT_FOUND" },
  { MVM_E_INVALID_HANDLE, "MVM_E_INVALID_HANDLE" },
  { MVM_E_STACK_OVERFLOW, "MVM_E_STACK_OVERFLOW" },
  { MVM_E_UNRESOLVED_IMPORT, "MVM_E_UNRESOLVED_IMPORT" },
  { MVM_E_ATTEMPT_TO_WRITE_TO_ROM, "MVM_E_ATTEMPT_TO_WRITE_TO_ROM" },
  { MVM_E_INVALID_ARGUMENTS, "MVM_E_INVALID_ARGUMENTS" },
  { MVM_E_TYPE_ERROR, "MVM_E_TYPE_ERROR" },
  { MVM_E_TARGET_NOT_CALLABLE, "MVM_E_TARGET_NOT_CALLABLE" },
  { MVM_E_HOST_ERROR, "MVM_E_HOST_ERROR" },
  { MVM_E_NOT_IMPLEMENTED, "MVM_E_NOT_IMPLEMENTED" },
  { MVM_E_HOST_RETURNED_INVALID_VALUE, "MVM_E_HOST_RETURNED_INVALID_VALUE" },
  { MVM_E_ASSERTION_FAILED, "MVM_E_ASSERTION_FAILED" },
  { MVM_E_INVALID_BYTECODE, "MVM_E_INVALID_BYTECODE" },
  { MVM_E_UNRESOLVED_EXPORT, "MVM_E_UNRESOLVED_EXPORT" },
  { MVM_E_RANGE_ERROR, "MVM_E_RANGE_ERROR" },
  { MVM_E_DETACHED_EPHEMERAL, "MVM_E_DETACHED_EPHEMERAL" },
  { MVM_E_TARGET_IS_NOT_A_VM_FUNCTION, "MVM_E_TARGET_IS_NOT_A_VM_FUNCTION" },
  { MVM_E_FLOAT64, "MVM_E_FLOAT64" },
  { MVM_E_NAN, "MVM_E_NAN" },
  { MVM_E_NEG_ZERO, "MVM_E_NEG_ZERO" },
  { MVM_E_OPERATION_REQUIRES_FLOAT_SUPPORT, "MVM_E_OPERATION_REQUIRES_FLOAT_SUPPORT" },
  { MVM_E_BYTECODE_CRC_FAIL, "MVM_E_BYTECODE_CRC_FAIL" },
  { MVM_E_BYTECODE_REQUIRES_FLOAT_SUPPORT, "MVM_E_BYTECODE_REQUIRES_FLOAT_SUPPORT" },
  { MVM_E_PROTO_IS_READONLY, "MVM_E_PROTO_IS_READONLY: The __proto__ property of objects and arrays is not mutable" },
  { MVM_E_SNAPSHOT_TOO_LARGE, "MVM_E_SNAPSHOT_TOO_LARGE: The resulting snapshot does not fit in the 64kB boundary" },
  { MVM_E_MALLOC_MUST_RETURN_POINTER_TO_EVEN_BOUNDARY, "MVM_E_MALLOC_MUST_RETURN_POINTER_TO_EVEN_BOUNDARY: MVM_E_MALLOC_MUST_RETURN_POINTER_TO_EVEN_BOUNDARY" },
  { MVM_E_ARRAY_TOO_LONG, "MVM_E_ARRAY_TOO_LONG" },
  { MVM_E_OUT_OF_MEMORY, "MVM_E_OUT_OF_MEMORY: Allocating a new block of memory from the host causes it to exceed MVM_MAX_HEAP_SIZE" },
  { MVM_E_TOO_MANY_ARGUMENTS, "MVM_E_TOO_MANY_ARGUMENTS: Exceeded the maximum number of arguments for a function (255)" },
  { MVM_E_REQUIRES_LATER_ENGINE, "MVM_E_REQUIRES_LATER_ENGINE: Please update your microvium.h and microvium.c files" },
  { MVM_E_PORT_FILE_VERSION_MISMATCH, "MVM_E_PORT_FILE_VERSION_MISMATCH: Please migrate your port file to the required version" },
  { MVM_E_PORT_FILE_MACRO_TEST_FAILURE, "MVM_E_PORT_FILE_MACRO_TEST_FAILURE: Something in microvium_port.h doesn't behave as expected" },
  { MVM_E_EXPECTED_POINTER_SIZE_TO_BE_16_BIT, "MVM_E_EXPECTED_POINTER_SIZE_TO_BE_16_BIT: MVM_NATIVE_POINTER_IS_16_BIT is 1 but pointer size is not 16-bit" },
  { MVM_E_EXPECTED_POINTER_SIZE_NOT_TO_BE_16_BIT, "MVM_E_EXPECTED_POINTER_SIZE_NOT_TO_BE_16_BIT: MVM_NATIVE_POINTER_IS_16_BIT is 0 but pointer size is 16-bit" },
  { MVM_E_TYPE_ERROR_TARGET_IS_NOT_CALLABLE, "MVM_E_TYPE_ERROR_TARGET_IS_NOT_CALLABLE: The script tried to call something that wasn't a function" },
  { MVM_E_TDZ_ERROR, "MVM_E_TDZ_ERROR: The script tried to access a local variable before its declaration" },
  { MVM_E_MALLOC_NOT_WITHIN_RAM_PAGE, "MVM_E_MALLOC_NOT_WITHIN_RAM_PAGE: See instructions in example port file at the definitions MVM_USE_SINGLE_RAM_PAGE and MVM_RAM_PAGE_ADDR" },
  { MVM_E_INVALID_ARRAY_INDEX, "MVM_E_INVALID_ARRAY_INDEX: Array indexes must be integers in the range 0 to 8191" },
  { MVM_E_UNCAUGHT_EXCEPTION, "MVM_E_UNCAUGHT_EXCEPTION: The script threw an exception with `throw`" },
  { MVM_E_FATAL_ERROR_MUST_KILL_VM, "Please make sure that MVM_FATAL_ERROR does not return, or bad things can happen. (Kill the process, the thread, or use longjmp)" },
  { MVM_E_OBJECT_KEYS_ON_NON_OBJECT, "Can only use Reflect.ownKeys on plain objects (not functions, arrays, or other values)" },
  { MVM_E_INVALID_UINT8_ARRAY_LENGTH, "Either non-numeric or out-of-range argument for creating a Uint8Array" },
  { MVM_E_CAN_ONLY_ASSIGN_BYTES_TO_UINT8_ARRAY, "Value assigned to index of Uint8Array must be an integer in the range 0 to 255" },
  { MVM_E_WRONG_BYTECODE_VERSION, "The version of bytecode is different to what the engine supports" },
  { MVM_E_USING_NEW_ON_NON_CLASS, "The `new` operator can only be used on classes" },
  { MVM_E_INSTRUCTION_COUNT_REACHED, "The instruction count set by `mvm_stopAfterNInstructions` has been reached" },
  { MVM_E_REQUIRES_ACTIVE_VM, "The given operation requires that the VM has active calls on the stack" },
  { MVM_E_ASYNC_START_ERROR, "mvm_asyncStart must be called exactly once at the beginning of a host function that is called from JS" },
  { MVM_E_ASYNC_WITHOUT_AWAIT, "mvm_asyncStart can only be used with a script that has await points. Add at least one (reachable) await point to the script." },
  { MVM_E_TYPE_ERROR_AWAIT_NON_PROMISE, "Can only await a promise in Microvium" },
  { MVM_E_HEAP_CORRUPT, "Microvium's internal heap is not in a consistent state" },
  { MVM_E_CLASS_PROTOTYPE_MUST_BE_NULL_OR_OBJECT, "The prototype property of a class must be null or a plain object" },
};
